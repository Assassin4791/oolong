package ru.tinkoff.oolong.mongo.dsl

import org.mongodb.scala.bson.BsonDocument
import ru.tinkoff.oolong.Utils.useWithinMacro

sealed trait Aggregation[DocT] {

  def `match`(input: DocT => Boolean): Aggregation[DocT] = useWithinMacro("`match`")
//  def group(value: Any): Aggregation[DocT] = useWithinMacro("group")
//  def project[NewDocT](value: Any): Aggregation[NewDocT] = useWithinMacro("project")



}

//
//$match: Фильтрует документы и выбирает только те, которые соответствуют заданным условиям.
//$group: Группирует документы по определенным полям и позволяет выполнять агрегацию на основе группировки.
//  $project: Выбирает только указанные поля из документов и позволяет создавать новые вычисляемые поля.
//  $sort: Сортирует документы по заданным полям в указанном порядке.
//  $limit: Ограничивает количество возвращаемых документов до заданного числа.
//$skip: Пропускает указанное количество документов и возвращает оставшиеся.
//  $unwind: Разбивает массивные поля на отдельные документы, создавая для каждого элемента новый документ.
//  $lookup: Позволяет объединять данные из нескольких коллекций на основе заданных условий.
//    $sample: Возвращает случайные документы из коллекции.
//  $redact: Производит пространственный отбор документов на основе заданных правил доступа.
//    $out: Записывает результаты агрегации в новую коллекцию.
//    $addFields: Добавляет новые поля с вычисленными значениями в документы.
//    $project: Выбирает только указанные поля из документов и позволяет переименовывать или удалять поля.
//    $replaceRoot: Заменяет корень документа на указанное поле или поддокумент.
//    $count: Возвращает общее количество документов, соответствующих заданным условиям.
//    $facet: Позволяет выполнять несколько независимых операций агрегации и возвращать результаты в виде отдельных объектов.
